generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

generator zod {
    provider          = "prisma-zod-generator"
    output            = "../zod/prisma"
    isGenerateSelect  = true
    isGenerateInclude = true
}

generator prismaClassGenerator {
    provider = "prisma-class-generator"
    output   = "../classes"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum VERIFICATIONSTATUS {
    Verified
    Pending
    Unverified
}

enum USSTATE {
    AL
    AK
    AS
    AZ
    AR
    UM_81
    CA
    CO
    CT
    DE
    DC
    FL
    GA
    GU
    HI
    UM_84
    ID
    IL
    IN
    IA
    UM_86
    UM_67
    KS
    KY
    UM_89
    LA
    ME
    MD
    MA
    MI
    UM_71
    MN
    MS
    MO
    MT
    UM_76
    NE
    NV
    NH
    NJ
    NM
    NY
    NC
    ND
    MP
    OH
    OK
    OR
    UM_95
    PA
    PR
    RI
    SC
    SD
    TN
    TX
    UM
    VI
    UT
    VT
    VA
    UM_79
    WA
    WI
    WV
    WY
}

enum ROLE {
    USER
    ADMIN
    BANNED
    EMPLOYEE
}

enum AMENITIY {
    total
    partial
    none
}

enum PARKING {
    limited
    valet
    withTicket
    offstreet
}

enum CATEGORY {
    Music
    Sports
    Comedy
}

enum Leagues {
    NFL
    NCAA
}

// TODO: Come back and complete this list when on wifi
enum NFLTeamName {
    Cardinals
    Falcons
    Ravens
    Bills
    Panthers
    Bengals
    Bears
    Browns
    Cowboys
    Broncos
    Lions
    Texans
    Packers
    Colts
    Rams
    Jaguars
    Vikings
    Chiefs
    Saints
    Raiders
    Giants
    Chargers
    Eagles
    Dolphins
    FourtyNiners
    Patriots
    Seahawks
    Jets
    Buccaneers
    Steelers
    Commanders
    Titans
    TBD
}

enum Country {
    US
    GER
    UK
}

enum NFL_Conference {
    NFC
    AFC
}

enum NFL_Division {
    North
    West
    East
    South
}

enum Sports {
    Basketball
    Football
    Soccer
    MMA
    Motorsports
}

enum FaqCategory {
    general
    billing
    services
    trustAndSaftey
}

model Faq {
    id        Int         @id @default(autoincrement())
    title     String
    subtitle  String
    body      String
    category  FaqCategory @default(general)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @default(now())
    priority  Int         @default(1)
}

model Colors {
    id        Int     @id @default(autoincrement())
    primary   String
    secondary String?
    Team      Team[]
}

model Logo {
    id     Int      @id @default(autoincrement())
    path   String
    width  Int
    height Int
    rel    String[]
    url    String?
    Team   Team?    @relation(fields: [teamId], references: [id])
    teamId Int?
}

// BUG: Change this to allow many to many relationships between teams and events. Need to get back on wifi to check syntax.
model Team {
    id                Int             @id @default(autoincrement())
    uniqueKey         String?         @unique
    name              NFLTeamName
    abbreviation      String?
    displayName       String?
    displayName_short String?
    nickname          String?
    league            Leagues         @default(NFL)
    sport             Sports          @default(Football)
    conference        NFL_Conference?
    division          NFL_Division?
    colors            Colors?         @relation(fields: [colorsId], references: [id])
    homeArena         Arena?          @relation(fields: [homeArenaId], references: [id])
    homeArenaId       Int?
    Event             Event[]
    colorsId          Int?
    logos             Logo[]
}

model Location {
    id        Int      @id @default(autoincrement())
    uniqueKey String?  @unique
    street    String?
    zip       Int?
    city      String
    cityId    Int?
    state     USSTATE?
    lat       Float?
    long      Float?
    country   Country  @default(US)
    arena     Arena[]
    userId    Int?     @unique
}

model User {
    id                      String                 @id @default(cuid())
    name                    String?
    role                    ROLE                   @default(USER)
    createdAt               DateTime               @default(now())
    email                   String?                @unique
    emailVerified           DateTime?              @map("email_verified")
    image                   String?
    paymentAccount          PaymentAccountDetails? @relation(fields: [paymentAccountDetailsId], references: [id])
    paymentAccountDetailsId Int?
    purchaseHistory         PurchaseHistory?
    idVerified              VERIFICATIONSTATUS     @default(Unverified)
    settings                Settings?
    accounts                Account[]
    sessions                Session[]
    gcmSubscription         Json?

    @@map("users")
}

model Event {
    id           Int            @id @default(autoincrement())
    category     CATEGORY
    arena        Arena          @relation(fields: [arenaId], references: [id])
    arenaId      Int
    tickets      Ticket[]
    ticketGroups TicketGroup[]
    amenities    ArenaAmenities @relation(fields: [amenitiesId], references: [id])
    amenitiesId  Int
    tags         Tag[]
    date         DateTime
    title        String
    description  String
    participants Team[]
}

model TicketGroup {
    id             Int          @id @default(autoincrement())
    Event          Event?       @relation(fields: [eventId], references: [id])
    eventId        Int?
    tickets        Ticket[]
    arenaSection   ArenaSection @relation(fields: [arenaSectionId], references: [id])
    arenaSectionId Int
}

model Ticket {
    id             Int          @id @default(autoincrement())
    Event          Event?       @relation(fields: [eventId], references: [id])
    eventId        Int?
    TicketGroup    TicketGroup? @relation(fields: [ticketGroupId], references: [id])
    ticketGroupId  Int?
    arenaSection   ArenaSection @relation(fields: [arenaSectionId], references: [id])
    arenaSectionId Int
}

model ArenaSection {
    id          Int           @id @default(autoincrement())
    name        String
    Arena       Arena         @relation(fields: [arenaId], references: [id])
    arenaId     Int
    section     Int
    row         Int
    Ticket      Ticket[]
    TicketGroup TicketGroup[]
}

model ArenaAmenities {
    id               Int      @id @default(autoincrement())
    Arena            Arena[]
    indoor           AMENITIY @default(partial)
    covered          AMENITIY @default(partial)
    outdoor          AMENITIY @default(partial)
    food             Boolean  @default(true)
    alcohol          Boolean  @default(true)
    parking          PARKING  @default(limited)
    shuttleAvailable Boolean  @default(false)
    Event            Event[]
}

model Tag {
    id    Int     @id @default(autoincrement())
    value String  @unique
    Event Event[]
}

model Image {
    id        Int      @id @default(autoincrement())
    publicUrl String?
    Arena     Arena[]
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model Arena {
    id               Int            @id @default(autoincrement())
    uniqueKey        String?        @unique
    name             String         @unique
    events           Event[]
    location         Location       @relation(fields: [locationId], references: [id])
    sections         ArenaSection[]
    amenities        ArenaAmenities @relation(fields: [arenaAmenitiesId], references: [id])
    sectionImage     Image?         @relation(fields: [sectionImageId], references: [id])
    arenaAmenitiesId Int
    locationId       Int
    sectionImageId   Int?
    homeTeams        Team[]
}

model PaymentAccountDetails {
    id            Int    @id @default(autoincrement())
    nameOnAccount String
    User          User[]
}

model Transaction {
    id        Int             @id @default(autoincrement())
    price     Float
    paymentId String
    sellerId  Int
    buyerId   Int
    seller    PurchaseHistory @relation(fields: [sellerId], references: [id], name: "seller")
    buyer     PurchaseHistory @relation(fields: [buyerId], references: [id], name: "buyer")
    date      DateTime        @default(now())
}

model TransactionUnbound {
    id        Int      @id @default(autoincrement())
    price     Float
    paymentId String
    sellerId  Int
    buyerId   Int
    date      DateTime @default(now())
}

model PurchaseHistory {
    id     Int           @id @default(autoincrement())
    bought Transaction[] @relation("buyer")
    sold   Transaction[] @relation("seller")
    user   User          @relation(fields: [userId], references: [id])
    userId String        @unique
}

model Settings {
    id       Int     @id @default(autoincrement())
    darkmode Boolean @default(true)
    user     User    @relation(fields: [userId], references: [id])
    userId   String  @unique
}

/// Auth stuff
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}
